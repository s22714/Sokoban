//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/BasicInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BasicInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BasicInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BasicInputs"",
    ""maps"": [
        {
            ""name"": ""BasicMouseAndKeys"",
            ""id"": ""d0f61a5d-ae95-4d22-a420-fc2fa07c9aaf"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""90290194-8d38-44bf-a0c8-2175a1b86334"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Undo"",
                    ""type"": ""Button"",
                    ""id"": ""102a5251-bca6-417a-b3fe-ce5d8c750ca7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d3cb9cac-9eb2-4f2a-b492-c2715418c543"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7a5d94fa-5dcc-4d9f-a2e6-ac9671845d33"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keys"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7351d4e4-4d2d-4da1-80d7-176f03b32d64"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keys"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2b829d4f-ad6f-4a5d-be2a-cbd4add87da8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keys"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f921e696-9f72-466f-ae6d-60ce21a75e17"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keys"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""00c026f0-1c89-46dc-b946-e3ced2416a45"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keys"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""03f4a84d-edf1-496c-a536-ca111c38903d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keys"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b9f28d3d-e942-4377-b1c5-e58c49e4e027"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keys"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""16627315-8538-4877-b6bc-eadd9f70b336"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keys"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""81db2684-b8d6-4d48-9b4d-a2b41381a400"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keys"",
                    ""action"": ""Undo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e65830d5-5b55-4b73-8b34-8ae3c63cf839"",
                    ""path"": ""<Keyboard>/numpad0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keys"",
                    ""action"": ""Undo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keys"",
            ""bindingGroup"": ""Keys"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // BasicMouseAndKeys
        m_BasicMouseAndKeys = asset.FindActionMap("BasicMouseAndKeys", throwIfNotFound: true);
        m_BasicMouseAndKeys_Move = m_BasicMouseAndKeys.FindAction("Move", throwIfNotFound: true);
        m_BasicMouseAndKeys_Undo = m_BasicMouseAndKeys.FindAction("Undo", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasicMouseAndKeys
    private readonly InputActionMap m_BasicMouseAndKeys;
    private List<IBasicMouseAndKeysActions> m_BasicMouseAndKeysActionsCallbackInterfaces = new List<IBasicMouseAndKeysActions>();
    private readonly InputAction m_BasicMouseAndKeys_Move;
    private readonly InputAction m_BasicMouseAndKeys_Undo;
    public struct BasicMouseAndKeysActions
    {
        private @BasicInputs m_Wrapper;
        public BasicMouseAndKeysActions(@BasicInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_BasicMouseAndKeys_Move;
        public InputAction @Undo => m_Wrapper.m_BasicMouseAndKeys_Undo;
        public InputActionMap Get() { return m_Wrapper.m_BasicMouseAndKeys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicMouseAndKeysActions set) { return set.Get(); }
        public void AddCallbacks(IBasicMouseAndKeysActions instance)
        {
            if (instance == null || m_Wrapper.m_BasicMouseAndKeysActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasicMouseAndKeysActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Undo.started += instance.OnUndo;
            @Undo.performed += instance.OnUndo;
            @Undo.canceled += instance.OnUndo;
        }

        private void UnregisterCallbacks(IBasicMouseAndKeysActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Undo.started -= instance.OnUndo;
            @Undo.performed -= instance.OnUndo;
            @Undo.canceled -= instance.OnUndo;
        }

        public void RemoveCallbacks(IBasicMouseAndKeysActions instance)
        {
            if (m_Wrapper.m_BasicMouseAndKeysActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasicMouseAndKeysActions instance)
        {
            foreach (var item in m_Wrapper.m_BasicMouseAndKeysActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasicMouseAndKeysActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasicMouseAndKeysActions @BasicMouseAndKeys => new BasicMouseAndKeysActions(this);
    private int m_KeysSchemeIndex = -1;
    public InputControlScheme KeysScheme
    {
        get
        {
            if (m_KeysSchemeIndex == -1) m_KeysSchemeIndex = asset.FindControlSchemeIndex("Keys");
            return asset.controlSchemes[m_KeysSchemeIndex];
        }
    }
    public interface IBasicMouseAndKeysActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnUndo(InputAction.CallbackContext context);
    }
}
